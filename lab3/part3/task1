// Object predefined methods:
// --------------------------
// 1-
    Object.freeze()
//    method freezes an object that prevents new properties from being added to it.
//    This method prevents the modification of existing property, attributes, and values.
//    Example:
   const object1 = {  
    property1: 22  
    };  
    const object2 = Object.freeze(object1);  
    object2.property1 = 33;  
    // Throws an error in strict mode  
    console.log(object2.property1);  //22

// 2-
Object.entries() 
// method is used to return an array of a given object's own enumerable property [key, value] pairs. 
// The ordering of the properties is the same as that given by looping over the property values of the object manually.
//    Example:
const obj = { 10: 'arry', 21: 'barry', 23: 'carry' };  
console.log(Object.entries(obj)[2]);  //["23", "carry"]

// 3-
    Object.getOwnPropertyNames()
//  method returns an array of all properties (except those non-enumerable properties which use symbol)
//  found directly upon a given object.
//    Example:
const object2 = {  
    a: 0,  
    b: 1,  
    c: 2,  
  };  
  console.log(Object.getOwnPropertyNames(object2)); //["a", "b", "c"]
  
// 4-
     Object.values()
//  returns an array which contains the given object's own enumerable property values,
//  in the same order as that provided by a for...in loop
//    Example:
const object3 = {  
    a: 'Rahul',  
    b: 0,  
    c:false  
  };  
  console.log(Object.values(object3));  //["Rahul", 0, false]

// 5-
     Object.is()
// static method determines whether two values are the same value.
//    Example:
Object.is(25, 25); // true
Object.is("foo", "foo"); // true
Object.is(foo, bar); // false

// 6-
     Object.preventExtensions()
//static method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object).
//It also prevents the object's prototype from being re-assigned.
//    Example:
const object4 = {};

Object.preventExtensions(object4);

try {
  Object.defineProperty(object4, 'property1', {
    value: 42
  });
} catch (e) {
  console.log(e);
  // Expected output: TypeError: Cannot define property property1, object is not extensible
}

// 7-
     Object.isFrozen()
//static method determines if an object is frozen.
//    Example:
const object5 = {
    property1: 42
  };
  
  console.log(Object.isFrozen(object5));
  // Expected output: false
  
  Object.freeze(object1);
  
  console.log(Object.isFrozen(object5));
  // Expected output: true

// 8-
     Object.hasOwn()
//static method returns true if the specified object has the indicated property as its own property. 
// If the property is inherited, or does not exist, the method returns false.
//    Example:
const object6 = {
    prop: 'exists'
  };
  
  console.log(Object.hasOwn(object6, 'prop'));
  // Expected output: true
  
  console.log(Object.hasOwn(object6, 'toString'));
  // Expected output: false
  
  console.log(Object.hasOwn(object6, 'undeclaredPropertyValue'));
  // Expected output: false
  
// 9-
     Object.assign()
//  static method copies all enumerable own properties from one or more source objects to a target object.
//  It returns the modified target object.
//    Example:
const target = { a: 1, b: 2 };
const source = { b: 4, c: 5 };

const returnedTarget = Object.assign(target, source);

console.log(target);
// Expected output: Object { a: 1, b: 4, c: 5 }

console.log(returnedTarget === target);
// Expected output: true

//10-
     Object.create()
//   static method creates a new object, using an existing object as the prototype of the newly created object.
//    Example:
const person = {
    isHuman: false,
    printIntroduction: function() {
      console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`);
    }
  };
  
  const me = Object.create(person);
  
  me.name = 'Matthew'; // "name" is a property set on "me", but not on "person"
  me.isHuman = true; // Inherited properties can be overwritten
  
  me.printIntroduction();
  // Expected output: "My name is Matthew. Am I human? true"
  
    